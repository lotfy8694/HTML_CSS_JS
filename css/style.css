/* 
ul {
  list-style-type: lower-armenian;
}
li {
  background-color: #EEE;
  margin-bottom: 20px;
} */



/* table {
  width: 100%;
  border: 1px solid #CCC;
  border-spacing: 0;
}
table td {
  padding: 15px;
  background-color: #EEE;
  border: 1px solid #CCC;
}
table thead td {
  background-color: #f44336;
  color: #FFF;
  font-weight: bold;
  text-align: center;
  border-color: #F35246;
} */


/* a:hover {
  color: red;
}

.ch:checked {
  display: none;
}
.in:focus {
  border-color: red;
  outline: none
} */



/* Pseudo Elements – First Letter, First Line, Selection  */

/* .two::first-letter {
  display: inline-block;
  background-color: red;
  color: white;
  font-size: 60px;
  font-weight: bold;
}
.three::first-line {
  font-weight: bold;
  color: green;
}
::selection {
  background-color: black;
  color: yellow;
}
 */


/* Before, After, Content */

/* content: attr(data-text); */



/* 
.parent {
  margin-bottom: 20px;
  overflow: hidden;
  counter-increment: members-counter;
}

.one::after {
  content: counter(members-counter);
  position: absolute;
  background-color: red;
  color: white;
  width: 20px;
  height: 20px;
  text-align: center;
  font-weight: bold;
  right: -10px;
  top: 50%;
  margin-top: -10px;
} */



/* Prefixes */

/* -webkit- => Chrome, Safari, New Opera Version
-moz- => Firefox
-ms- => Ie, Edge
-o- => Old Version of Opera


.class {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -o-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
} */



/* border-radius  */
/* Transition */





















/* !Important  */

/* Box Model And Box Sizing */
/* * {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
} */


/*
  CSS Variables
  - Global Variable
  - Local Variable
  var(Variable Name, Fall Back Value)
*/

/* :root {
  --mainColor: blue;
  --mainPadding: 10px;
}
.main {
  background-color: var(--mainColor, black);
  color: white;
  padding: calc(20px + var(--mainPadding));
}
h2 {
  color: var(--mainColor);
  background-color: #eee;
  padding: var(--mainPadding);
}
p {
  color: var(--mainColor);
  border: 2px solid var(--mainColor);
  padding: var(--mainPadding);
}
a:hover {
  color: var(--mainColor);
}
.local {
  --mainColor: black;
  background-color: var(--mainColor);
  color: white;
} */
/* ====================================== */

/* flex   Direction, Wrap,Justify Content,Align Items,order,flex*/

/* flex-flow: [Flex-Direction] + [Flex-Wrap] */



/* Flex Froggy Game */



/* filter  */


/* img {
  transition: 0.3s;
  filter: grayscale(100%);
}
img:hover {
  filter: grayscale(0);
} */




/*
  Gradients
  linear-gradient(Direction || Angle, Color Stop 1, Color Stop 2, ....)
*/

/* div {
  width: 400px;
  height: 200px;
  background-color: #eee;
  margin: 20px auto;
  position: relative;
  padding: 10px;
}
div:before {
  content: "";
  position: absolute;
  top: -10px;
  left: 0;
  width: 100%;
  background-color: red;
  height: 10px;
  background-image: linear-gradient(
    to right,
    #2980b9 20%,
    #27ae60 20%,
    #27ae60 40%,
    #d35400 40%,
    #d35400 60%,
    #8e44ad 60%,
    #8e44ad 80%,
    #c0392b 80%
  );
} */


/* Grid – Parent – Template Columns and Rows And Gap */

 /* .parent {
  margin: 20px auto;
  width: 800px;
  height: 500px;
  background-color: #ddd;
  display: grid;
  grid-template-columns: repeat(2, auto) repeat(2, 1fr);
  /* grid-template-columns: repeat(4, 1fr); 
  grid-template-rows: repeat(3, 1fr); 
  row-gap: 10px;
  column-gap: 10px; 
  gap: 10px 10px; 
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  align-content: space-between;  */
 /* }  */ 
/* .parent div {
  background-color: red;
  color: white;
  padding: 20px;
  font-size: 30px;
  font-weight: bold;
  text-align: center;
}  */


/* 2D Transform – Scale /Rotate/Translate/Skew */

/* div {
  margin: 200px auto;
  width: 200px;
  height: 200px;
  background-color: rgb(255 0 0 / 39%);
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 30px;
  transform: scaleX(2);
  transform: scaleY(2);
  transform: scale(2, 2);

  transform: rotate(45deg);
  transform: rotate(1turn);
  transform: rotate(0.5turn);
  transform: rotate(0.25turn);

  transform: translate(-100px, -100px);
} */

/* Skew */

/* h2 {
  position: relative;
  color: white;
  margin: 20px auto;
  width: fit-content;
  padding: 20px;
}
h2::before {
  content: "";
  background-color: red;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  transform: skewX(20deg);
}
div {
  margin: 200px auto;
  width: 200px;
  height: 200px;
  background-color: rgb(255 0 0 / 39%);
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 30px;
  transform: skewX(10deg);
  transform: skewX(-10deg);
  transform: skewY(10deg);
  transform: skewY(-10deg);
  transform: skew(10deg, 10deg);
} */

/* 3D Transform – Rotate */


/* div {
  margin: 200px auto;
  width: 200px;
  height: 200px;
  background-color: rgb(255 0 0 / 39%);
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 30px;
  transform: rotateX(50deg);
  transform: rotateY(50deg);
  transform: rotateZ(50deg);
  transform: rotate3d(1, 1, 1, 65deg);
} */

/* 3D Transform – Backface Visibility And Flip Product */


/* .container {
  margin: 40px auto;
  width: 200px;
  perspective: 600px;
}
.box {
  position: relative;
  width: 200px;
  height: 200px;
  transform-style: preserve-3d;
  transition: transform 1s;
  transform-origin: right center;
}
.box:hover {
  transform: translateX(-100%) rotateY(-180deg);
}
.box .face {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 30px;
  color: white;
  backface-visibility: hidden;
}
.box .front {
  background-color: red;
}
.box .back {
  background-color: green;
  transform: rotateY(180deg);
} */

/* Animation – KeyFrames, Name, Duration,Iteration Count, Timing Function */

/*
  Animation
  - KeyFrames
  - Name
  - Duration
*/
 /* div {
  width: 100px;
  height: 100px;
  background-color: red;
  position: absolute;
  left: 50%;
  top: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  transform: translate(-50%, -50%);
  animation-name: change-color;
  animation-duration: 2s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation: change-color 2s linear infinite;
}

 @keyframes change-color {
  from {
    background-color: red;
  }
  to {
    background-color: blue;
  }
} 

 @keyframes change-color {
  0% {
    background-color: red;
  }
  100% {
    background-color: blue;
  }
} 

 @keyframes change-color {
  0% {
    background-color: red;
  }
  5% {
    background-color: blue;
  }
  80% {
    background-color: black;
  }
  100% {
    background-color: red;
  } 
 }  */


 /* Up And Down Loading Animation Training */

 /* body {
  font-family: Arial, Helvetica, sans-serif;
  background-color: #333;
}
.load {
  display: flex;
  justify-content: center;
  margin: 100px auto;
}
.load div {
  width: 20px;
  height: 20px;
  background-color: orchid;
  border-radius: 50%;
  margin: 0 5px;
  animation-name: up-and-down;
  animation-duration: 0.9s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}
.load .two {
  animation-delay: 0.3s;
}
.load .three {
  animation-delay: 0.6s;
}
@keyframes up-and-down {
  to {
    opacity: 0.2;
    transform: translateY(-20px);
  }
} */




/* Selectors Reference */
/*
  CSS Selectors
  - *
  - Element => [p, div, h2]
  - Element OtherElement => div p
  - .class-name
  - #id-name
  - .parent .child
  - .class-one.class-two
  - .class-name div, .class-name p
  - Element.class-name => p.class-name
  - .parent > .child => Direct Child
  - Element + Other Element => [div + p]
  - Element ~ Other Elements => [p ~ div]
  - [Attribute]
  - Element[Attribute]
  - [Attribute=Value]
  - Element[Attribute=Value] => input[type="submit"]
  - [Attribute~=Value] => Contains A Word
  - [Attribute*=Value] => Contains A Atring
  - [Attribute^=Value] => Start With A String
  - :first-child
  - :last-child
  - :first-of-type
  - :last-of-type
  - :not(Selectors)
  - :nth-child(n)

*/


/* Media Queries And Responsive Design  */

/* Mobile */

@media (max-width: 767px) {
}

/* Small Screens */

@media (min-width: 768px) and (max-width: 991px) {
}

/* Medium Screens */

@media (min-width: 992px) {
}

/* Large Screens */

@media (min-width: 1200px) {
}

/* Custom */

@media (max-width: 1199px) {
}

















